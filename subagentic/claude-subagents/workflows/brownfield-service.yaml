# <!-- Powered by BMAD™ Core -->
workflow:
  id: brownfield-service
  name: Brownfield Service/API Enhancement
  description: >-
    Agent workflow for enhancing existing backend services and APIs with new features,
    modernization, or performance improvements. Handles existing system analysis and safe integration.
  type: brownfield
  project_types:
    - service-modernization
    - api-enhancement
    - microservice-extraction
    - performance-optimization
    - integration-enhancement

  sequence:
    - step: service_analysis
      agent: holistic-architect
      action: analyze existing project and use task document-project
      creates: multiple documents per the document-project template
      notes: "Review existing service documentation, codebase, performance metrics, and identify integration dependencies."

    - agent: product-manager
      creates: prd.md
      uses: brownfield-prd-tmpl
      requires: existing_service_analysis
      notes: "Creates comprehensive PRD focused on service enhancement with existing system analysis. SAVE OUTPUT: Copy final prd.md to your project's docs/ folder."

    - agent: holistic-architect
      creates: architecture.md
      uses: brownfield-architecture-tmpl
      requires: prd.md
      notes: "Creates architecture with service integration strategy and API evolution planning. SAVE OUTPUT: Copy final architecture.md to your project's docs/ folder."

    - agent: product-owner
      validates: all_artifacts
      uses: po-master-checklist
      notes: "Validates all documents for service integration safety and API compatibility. May require updates to any document."

    - agent: various
      updates: any_flagged_documents
      condition: po_checklist_issues
      notes: "If PO finds issues, return to relevant agent to fix and re-export updated documents to docs/ folder."

    - agent: product-owner
      action: shard_documents
      creates: sharded_docs
      requires: all_artifacts_in_project
      notes: |
        Shard documents for IDE development:
        - Option A: Use PO agent to shard: @product-owner then ask to shard docs/prd.md
        - Option B: Manual: Drag shard-doc task + docs/prd.md into chat
        - Creates docs/prd/ and docs/architecture/ folders with sharded content

    - agent: scrum-master
      action: create_story
      creates: story.md
      requires: sharded_docs
      repeats: for_each_epic
      notes: |
        Story creation cycle:
        - SM Agent (New Chat): @scrum-master → *create
        - Creates next story from sharded docs
        - Story starts in "Draft" status

    - agent: business-analyst/product-manager
      action: review_draft_story
      updates: story.md
      requires: story.md
      optional: true
      condition: user_wants_story_review
      notes: |
        OPTIONAL: Review and approve draft story
        - NOTE: story-review task coming soon
        - Review story completeness and alignment
        - Update story status: Draft → Approved

    - agent: full-stack-dev
      action: implement_story
      creates: implementation_files
      requires: story.md
      notes: |
        Dev Agent (New Chat): @full-stack-dev
        - Implements approved story
        - Updates File List with all changes
        - Marks story as "Review" when complete

    - agent: qa-test-architect
      action: review_implementation
      updates: implementation_files
      requires: implementation_files
      optional: true
      notes: |
        OPTIONAL: QA Agent (New Chat): @qa → review-story
        - Senior dev review with refactoring ability
        - Fixes small issues directly
        - Leaves checklist for remaining items
        - Updates story status (Review → Done or stays Review)

    - agent: full-stack-dev
      action: address_qa_feedback
      updates: implementation_files
      condition: qa_left_unchecked_items
      notes: |
        If QA left unchecked items:
        - Dev Agent (New Chat): Address remaining items
        - Return to QA for final approval

    - step: repeat_development_cycle
      action: continue_for_all_stories
      notes: |
        Repeat story cycle (scrum-master → full-stack-dev → qa-test-architect) for all epic stories
        Continue until all stories in PRD are complete

    - agent: product-owner
      action: epic_retrospective
      creates: epic-retrospective.md
      condition: epic_complete
      optional: true
      notes: |
        OPTIONAL: After epic completion
        - NOTE: epic-retrospective task coming soon
        - Validate epic was completed correctly
        - Document learnings and improvements

    - step: workflow_end
      action: project_complete
      notes: |
        All stories implemented and reviewed!
        Project development phase complete.

        Reference: .bmad-core/data/bmad-kb.md#IDE Development Workflow

  flow_diagram: |
    ```mermaid
    graph TD
        A[Start: Service Enhancement] --> B[analyst: analyze existing service]
        B --> C[product-manager: prd.md]
        C --> D[holistic-architect: architecture.md]
        D --> E[product-owner: validate with po-master-checklist]
        E --> F{PO finds issues?}
        F -->|Yes| G[Return to relevant agent for fixes]
        F -->|No| H[product-owner: shard documents]
        G --> E
        
        H --> I[scrum-master: create story]
        I --> J{Review draft story?}
        J -->|Yes| K[business-analyst/product-manager: review & approve story]
        J -->|No| L[full-stack-dev: implement story]
        K --> L
        L --> M{QA review?}
        M -->|Yes| N[qa-test-architect: review implementation]
        M -->|No| O{More stories?}
        N --> P{QA found issues?}
        P -->|Yes| Q[full-stack-dev: address QA feedback]
        P -->|No| O
        Q --> N
        O -->|Yes| I
        O -->|No| R{Epic retrospective?}
        R -->|Yes| S[product-owner: epic retrospective]
        R -->|No| T[Project Complete]
        S --> T

        style T fill:#90EE90
        style H fill:#ADD8E6
        style I fill:#ADD8E6
        style L fill:#ADD8E6
        style C fill:#FFE4B5
        style D fill:#FFE4B5
        style K fill:#F0E68C
        style N fill:#F0E68C
        style S fill:#F0E68C
    ```

  decision_guidance:
    when_to_use:
      - Service enhancement requires coordinated stories
      - API versioning or breaking changes needed
      - Database schema changes required
      - Performance or scalability improvements needed
      - Multiple integration points affected

  handoff_prompts:
    business-analyst_to_product-manager: "Service analysis complete. Create comprehensive PRD with service integration strategy."
    product-manager_to_holistic-architect: "PRD ready. Save it as docs/prd.md, then create the service architecture."
    holistic-architect_to_product-owner: "Architecture complete. Save it as docs/architecture.md. Please validate all artifacts for service integration safety."
    product-owner_issues: "PO found issues with [document]. Please return to [agent] to fix and re-save the updated document."
    complete: "All planning artifacts validated and saved in docs/ folder. Move to IDE environment to begin development."
